{"version":3,"file":"static/js/62.490fecd2.chunk.js","mappings":"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","sources":["routes/Register.js"],"sourcesContent":["import { Form, Button } from 'react-bootstrap';\r\nimport {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst idError = {\r\n    'empty' : '아이디를 입력해주세요.',\r\n    'exist_id' : '입력하신 아이디가 이미 존재합니다.',\r\n    'small_len' : '아이디는 5자 이상이어야 합니다.'\r\n}\r\n\r\nconst pwdError = {\r\n    'empty' : '비밀번호를 입력해주세요.',\r\n    'small_len' : '비밀번호는 8자 이상이어야 합니다.'\r\n}\r\n\r\nfunction Register(){\r\n    const [validated, setValidated] = useState(false)\r\n    const [id, setId] = useState('')\r\n    const [pwd, setPwd] = useState('')\r\n    const [validId, setValidId] = useState(false)\r\n    const [validPwd, setValidPwd] = useState(false)\r\n    const [validCheck, setValidCheck] = useState(false)\r\n\r\n    const [errorId, setErrorId] = useState(idError.empty)\r\n    const [errorPwd, setErrorPwd] = useState(pwdError.empty)\r\n\r\n    const handleId = (e) => {\r\n        if (e.target.value.length > 4){\r\n            setId(e.target.value)\r\n            setValidId(false)\r\n            setErrorId(idError.empty)\r\n        } else {\r\n            setValidId(true)\r\n            setErrorId(idError.small_len)\r\n        }\r\n    }\r\n\r\n    const handlePwd = (e) => {\r\n        if (e.target.value.length > 7){\r\n            setPwd(e.target.value)\r\n            setValidPwd(false)\r\n            setErrorPwd(pwdError.empty)\r\n        } else {\r\n            setValidPwd(true)\r\n            setErrorPwd(pwdError.small_len)\r\n        }\r\n        \r\n    }\r\n\r\n    const handleCheck = (e) => {\r\n        if (e.target.value != pwd){\r\n            setValidCheck(true)\r\n        } else {\r\n            setValidCheck(false)\r\n        }\r\n    }\r\n    \r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        } else {\r\n            axios.post('/register', {'username' : id, 'password' : pwd})\r\n            .then(\r\n                (res) => {\r\n                    if (res.status == 0){\r\n                        setValidId(true)\r\n                        setErrorId(idError.exist_id)\r\n                        alert(\"입력한 아이디가 이미 존재합니다.\")\r\n                    } else if (res.status == 200) {\r\n                        window.location.href = '/'\r\n                    }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                alert(error)\r\n            })\r\n        }\r\n\r\n        setValidated(true);\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    };\r\n    \r\n    return(\r\n        <div>\r\n            <Form noValidate validated={validated} onSubmit={handleSubmit} className='forms mt-5'>\r\n                <h1>회원가입</h1>\r\n                <Form.Group controlId=\"validationUsername\">\r\n                    <Form.Label>아이디</Form.Label>\r\n                    <Form.Control className = {`${validId ? 'is-invalid' : ''}`}\r\n                      onChange={handleId}\r\n                      type=\"text\"\r\n                      placeholder=\"아이디\"\r\n                      required\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {errorId}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"validationPassword\" className='mt-3'>\r\n                    <Form.Label>비밀번호</Form.Label>\r\n                    <Form.Control className = {`${validPwd ? 'is-invalid' : ''}`}\r\n                      onChange={handlePwd}\r\n                      type=\"password\"\r\n                      placeholder=\"비밀번호\"\r\n                      required\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        {errorPwd}\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"validationPasswordCheck\" className='mt-3'>\r\n                    <Form.Label>비밀번호 확인</Form.Label>\r\n                    <Form.Control className = {`${validCheck ? 'is-invalid' : ''}`}\r\n                      onChange={handleCheck}\r\n                      type=\"password\"\r\n                      placeholder=\"비밀번호 확인\"\r\n                      required\r\n                    />\r\n                    <Form.Control.Feedback type=\"invalid\">\r\n                        비밀번호와 일치하지 않습니다.\r\n                    </Form.Control.Feedback>\r\n                </Form.Group>\r\n                <Button type=\"submit\" className='mt-3'>회원가입</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;"],"names":["idError","pwdError","validated","setValidated","useState","id","setId","pwd","setPwd","validId","setValidId","validPwd","setValidPwd","validCheck","setValidCheck","errorId","setErrorId","errorPwd","setErrorPwd","_jsx","children","_jsxs","Form","noValidate","onSubmit","event","currentTarget","checkValidity","preventDefault","stopPropagation","axios","post","then","res","status","alert","window","location","href","catch","error","className","Group","controlId","Label","Control","concat","onChange","e","target","value","length","type","placeholder","required","Feedback","Button"],"sourceRoot":""}