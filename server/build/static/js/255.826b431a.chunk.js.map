{"version":3,"file":"static/js/255.826b431a.chunk.js","mappings":"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","sources":["routes/Test.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction Test(){\r\n    const [recording, setRecording] = useState(false)\r\n    const [audioURL, setAudioURL] = useState(null)\r\n    const [mediaRecorder, setMediaRecorder] = useState(null)\r\n    const [audioBlob, setAudioBlob] = useState(null)\r\n    let [count, setCount] = useState(0);\r\n    let [words, setWords] = useState([]);\r\n    let [word, setWord] = useState('')\r\n    let [results, setResults] = useState([])\r\n    let [isResult, setIsResult] = useState(false)\r\n    let [score, setScore] = useState(0)\r\n    let [len, setLen] = useState(0)\r\n    let [recog, setRecog] = useState('')\r\n    let [end, setEnd] = useState(false)\r\n    let [nums, setNums] = useState([])\r\n\r\n    let navigate = useNavigate()\r\n\r\n    const getWords = async () => {\r\n        const res = await axios.get('/words', {withCredentials : true})\r\n        const arr = res.data.words\r\n        setNums(res.data.nums)\r\n        let temp = []\r\n        for (let i = 0; i < arr.length; i++){\r\n            temp.push(arr[i].word)\r\n        }\r\n        setWords(temp)\r\n        setLen(temp.length)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        getWords()\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        if (words.length > 0) {\r\n            setWord(words[count])\r\n        }\r\n    }, [words, count])\r\n\r\n    const StartRecording = () => {\r\n        navigator.mediaDevices.getUserMedia({audio: true})\r\n          .then((stream) => {\r\n            const recorder = new MediaRecorder(stream)\r\n            recorder.ondataavailable = (event) => {\r\n                const audioData = event.data\r\n                setAudioBlob(audioData)\r\n                const url = URL.createObjectURL(audioData)\r\n                setAudioURL(url)\r\n            }\r\n            recorder.start();\r\n            setMediaRecorder(recorder);\r\n            setRecording(true)\r\n          })\r\n          .catch((error) => {\r\n            console.error(\"Error accessing microphone\", error)\r\n          })\r\n    }\r\n\r\n    const stopRecording = () => {\r\n        mediaRecorder.stop()\r\n        setRecording(false)\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        const formData = new FormData()\r\n        formData.append('file', audioBlob, 'recording.wav')\r\n        formData.append('word', word)\r\n\r\n        try {\r\n            const res = await axios.post('/test', formData, {\r\n                headers : {\r\n                    \"Content-Type\" : \"multipart/form-data\"\r\n                }\r\n            })\r\n    \r\n            setIsResult(true)\r\n            setScore(res.data.score)\r\n            setRecog(res.data.recognized)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        \r\n    }\r\n\r\n    const submit = async () => {\r\n        await axios.post('/result', {scores : results, nums: nums}, {withCredentials : true})\r\n          .then(response => {\r\n            if (response.status == 200) {\r\n                window.location.href = '/'\r\n            }\r\n          })\r\n          .catch(error => {\r\n            alert(error)\r\n          })\r\n    }\r\n    \r\n    return(\r\n        <div className='test mt-5'>\r\n            {end ? \r\n            <Button variant=\"success\" onClick={() => {submit()}}>제출</Button> \r\n            :\r\n            <div>\r\n                <p>문제 {count + 1} / {len}</p>\r\n                <p>{word}</p>\r\n                <Button variant=\"success\" onClick={recording ? stopRecording : StartRecording}>\r\n                    {recording ? \"정지\" : \"녹음\"}\r\n                </Button>\r\n                {audioURL && (\r\n                    <div className='mt-3'>\r\n                        <p>녹음 결과</p>\r\n                        <audio controls src={audioURL}></audio>\r\n                        <br />\r\n                        {!isResult && <Button variant=\"success\" onClick={() => {handleSubmit()}} className='mt-2'>제출</Button>}\r\n                        {isResult && <p className='mt-2'>점수: {score} <br /> AI가 인식한 발음: {recog}</p>}\r\n                    </div>\r\n                )}\r\n                <br />\r\n                {isResult && (\r\n                <Button variant=\"success\" onClick={() => {\r\n                    let copy = [...results, score]\r\n                    setResults(copy)\r\n                    setAudioURL(null)\r\n                    setIsResult(false)\r\n                    if (count == words.length - 1){\r\n                        setEnd(true)\r\n                    } else {\r\n                        let t = count\r\n                        setCount(count + 1)\r\n                        setWord(words[t + 1])\r\n                    }\r\n                }} className='mt-3'>다음</Button>)}\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test;"],"names":["recording","setRecording","useState","audioURL","setAudioURL","mediaRecorder","setMediaRecorder","audioBlob","setAudioBlob","count","setCount","words","setWords","word","setWord","results","setResults","isResult","setIsResult","score","setScore","len","setLen","recog","setRecog","end","setEnd","nums","setNums","useNavigate","useEffect","async","res","axios","get","withCredentials","arr","data","temp","i","length","push","getWords","_jsx","className","children","Button","variant","onClick","post","scores","then","response","status","window","location","href","catch","error","alert","submit","_jsxs","stopRecording","stop","StartRecording","navigator","mediaDevices","getUserMedia","audio","stream","recorder","MediaRecorder","ondataavailable","event","audioData","url","URL","createObjectURL","start","console","controls","src","formData","FormData","append","headers","recognized","log","handleSubmit","copy","t"],"sourceRoot":""}